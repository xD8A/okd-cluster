# Base configuration
#platform=x86, AMD64, or Intel EM64T
#version=DEVEL

# Install OS instead of upgrade
install
cdrom

# Use text mode install
text

# Installation logging level
logging --level=info

## LOCALIZATION
# System timezone
timezone Europe/Samara
# System keyboard
keyboard --xlayouts=us,ru --switch=grp:alt_shift_toggle
# System language
lang en_US.UTF-8 --addsupport=ru_RU.UTF-8

## SECURITY
# Firewall configuration
firewall --enabled
# SELinux configuration
selinux --enforcing

## SYSTEM
ignoredisk --only-use=sda
# System bootloader configuration
bootloader --location=mbr --append="nomodeset crashkernel=auto ipv6.disable=1 rhgb quiet"
zerombr
# Partition clearing information
clearpart --all --initlabel
# Disk partitioning information
part /boot --asprimary --fstype="ext4" --size=300
part / --asprimary --fstype="ext4" --grow --size=8192
part swap --recommended

# Network information
# TODO: configure interfaces
network --device=enp0s3 --bootproto=static --ip=192.168.2.1 --netmask=255.255.255.0 --hostname=hub --onboot=yes --noipv6
network --device=enp0s8 --bootproto=dhcp --onboot=yes --noipv6 --activate

# System authorization information
auth  --useshadow  --passalgo=sha512
# TODO: configure passwords
rootpw --iscrypted $6$jLuXdFs1UXtiT6iW$6mlZgKH3ljcqGZb.fU/K6oQmEqjYxW63wWjeJmOKUWsJa4F0RNJesNJN.md5YfLxaPkOk.e0h25VF7GpJ4Y380
user --name=kubeadmin --iscrypted --password=$6$dX/Qlu0hab1u.dHA$mC7Mq.WPoxrcHCFBMuI8ki8NLhA4W1VYIwM7ghB9B9PF6vQi4BPaTfG4aRYbDeIQkDJOzDRyzWJiAaANU47Kk0
sshkey --username=kubeadmin "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFN1sRRXg23zD3pJADyC+uDqGNMyJq22pwOkR6KSCENf"

# Reboot after installation
reboot

## SOFTWARE
skipx

# Packages
%packages
@^minimal
@core
policycoreutils-python
tftp-server
xinetd
syslinux
ntp
bind
bind-utils
dhcp
haproxy
httpd
nfs-utils
nano
mc
%end

services --enabled=firewalld,NetworkManager,xinetd,ntpd,named,dhpcd,haproxy,httpd,rpcbind,nfs-server


%post --log=/var/log/ks-post.log

################################################################################
## Custom variables
################################################################################

# TODO: configure interfaces
export ETH0=enp0s3
export ETH1=enp0s8
# TODO: configure network
export FORWARD_DNS=8.8.8.8
export NET_BASE=192.168.2
export INNET_BASE=$(echo $NET_BASE | awk -F '.' '{ print $3"."$2"."$1 }')
export SEARCH_DOMAIN=okd.lan
# TODO: configure machines (mac,hostname,ip)
export HUB=08:00:27:18:00:01,hub,1,
export BOOTSTRAP=08:00:27:18:02:00,bootstrap,200,
export MASTERS="08:00:27:18:02:01,master1,201,;08:00:27:18:02:02,master2,202,"
export WORKERS="08:00:27:18:02:04,worker1,204,;08:00:27:18:02:05,worker2,205,"
# setup variables
export HUB_MAC=$(echo $HUB | awk -F ',' '{ print $1 }')
export HUB_NAME=$(echo $HUB | awk -F ',' '{ print $2 }')
export HUB_ID=$(echo $HUB | awk -F ',' '{ print $3 }')
export HUB_IP=$NET_BASE.$HUB_ID
export BOOTSTRAP_MAC=$(echo $BOOTSTRAP | awk -F ',' '{ print $1 }')
export BOOTSTRAP_NAME=$(echo $BOOTSTRAP | awk -F ',' '{ print $2 }')
export BOOTSTRAP_ID=$(echo $BOOTSTRAP | awk -F ',' '{ print $3 }')
export BOOTSTRAP_IP=$NET_BASE.$BOOTSTRAP_ID
export MASTER_IDS=$(echo $MASTERS | awk 'BEGIN{RS=";";FS=","} { print $3 }')
export MASTER_IPS=$(echo $MASTER_IDS | awk -v NB=$NET_BASE -F '.' '{ print NB"."$4 }')
export MASTER_NUM=$(echo $MASTER_IDS | awk '{N++} END {print N}')
export WORKER_IDS=$(echo $WORKERS | awk 'BEGIN{RS=";";FS=","} { print $3 }')
export WORKER_IPS=$(echo $WORKER_IPS | awk -v NB=$NET_BASE -F '.' '{ print NB"."$4 }')
export ETH0_ROUTER=$HUB_IP

export CLUSTER_NAME=lab

export FCOS_VERSION=32.20201104.3.0
export FCOS_BASE_URL=https://builds.coreos.fedoraproject.org/prod/streams/stable/builds/$FCOS_VERSION/x86_64/fedora-coreos-$FCOS_VERSION

export OKD_VERSION=4.5.0-0.okd-2020-07-29-070316
export OKD_BASE_URL=https://github.com/openshift/okd/releases/download/$OKD_VERSION

################################################################################
## Configure network
################################################################################
# Disable IPv6
sed -i.bak -E 's/#?AddressFamily\s+.+/AddressFamily inet/' /etc/ssh/sshd_config
sed -i.bak -E "s/^([udptc]{3}6.*)/#\1/g" /etc/netconfig
# Configure NIC
echo NAME=$ETH0 >> /etc/sysconfig/network-scripts/ifcfg-$ETH0
echo DNS1=127.0.0.1 >> /etc/sysconfig/network-scripts/ifcfg-$ETH0
echo NAME=$ETH1 >> /etc/sysconfig/network-scripts/ifcfg-$ETH1
echo PEERDNS=no >> /etc/sysconfig/network-scripts/ifcfg-$ETH1
# Configure gateway
echo net.ipv4.ip_forward=1 >> /etc/sysctl.conf
firewall-offline-cmd --zone=internal --add-interface=$ETH0
firewall-offline-cmd --zone=internal --set-target=ACCEPT
firewall-offline-cmd --direct --add-rule ipv4 nat POSTROUTING 0 -o $ETH1 -j MASQUERADE
firewall-offline-cmd --direct --add-rule ipv4 filter FORWARD 0 -i $ETH0 -o $ETH1 -j ACCEPT
firewall-offline-cmd --direct --add-rule ipv4 filter FORWARD 0 -i $ETH1 -o $ETH0 -m state --state RELATED,ESTABLISHED -j ACCEPT

################################################################################
## Configure PXE server
################################################################################
# Deploy syslinux
mkdir -p /var/lib/tftpboot \
  && cp -v /usr/share/syslinux/{chain,menu,vesamenu}.c32 /var/lib/tftpboot \
  && cp -v /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot \
  && mkdir /var/lib/tftpboot/pxelinux.cfg
# Create PXE menu 
# /var/lib/tftpboot/pxelinux.cfg/default
cat << EOT > /var/lib/tftpboot/pxelinux.cfg/default
SERIAL 0 38400
UI vesamenu.c32
MENU TITLE PXE Network Boot Menu
MENU BACKGROUND #c00090f0

MENU WIDTH 78
MENU MARGIN 4
MENU ROWS 15
MENU TABMSGROW 22
MENU CMDLINEROW 22
MENU HELPMSGROW 24
MENU HELPMSGENDROW 37

MENU COLOR border * #00000000 #00000000 none
MENU COLOR title  * #FFFFFFFF *
MENU COLOR sel    * #FFFFFFFF #76A1D0FF *
MENU COLOR hotsel 1;7;37;40 #FFFFFFFF #76A1D0FF *
MENU COLOR help   37;40 #FFDDDD00 #00000000 *
MENU COLOR timeout_msg  37;40 #80FFFFFF #00000000 *
MENU COLOR timeout  1;37;40 #C0FFFFFF #00000000 *
MENU COLOR msg07  37;40 #90FFFFFF #a0000000 *
MENU COLOR tabmsg * #FFFFFFFF #00000000 *

TIMEOUT 300

LABEL existing
  TEXT HELP
    Boot an existing operating system.
    Press TAB to edit the disk and partition number to boot.
  ENDTEXT
  MENU LABEL Boot existing OS
  MENU DEFAULT
  COM32 chain.c32
  APPEND hd0 0
MENU END

MENU BEGIN okd4
  MENU LABEL OpenShift Kubernetes
    LABEL mainmenu
      MENU LABEL ^Back...
      MENU EXIT
    LABEL boot
      MENU LABEL Boot live
      KERNEL fcos/kernel
      APPEND initrd=fcos/initramfs.img,fcos/rootfs.img audit=0 ip=dhcp ignition.firstboot ignition.platform.id=metal ignition.config.url=http://$HUB_IP:8080/okd4/live.ign systemd.unified_cgroup_hierarchy=0 
    LABEL installworker
      MENU LABEL Install worker
      KERNEL fcos/kernel
      APPEND initrd=fcos/initramfs.img,fcos/rootfs.img ip=dhcp coreos.inst=yes coreos.inst..platform.id=metal coreos.inst.insecure coreos.inst.install_dev=/dev/sda coreos.inst.ignition_url=http://$HUB_IP:8080/okd4/worker.ign
    LABEL installmaster
      MENU LABEL Install master 
      KERNEL fcos/kernel
      APPEND initrd=fcos/initramfs.img,fcos/rootfs.img ip=dhcp coreos.inst=yes coreos.inst..platform.id=metal coreos.inst.insecure coreos.inst.install_dev=/dev/sda coreos.inst.ignition_url=http://$HUB_IP:8080/okd4/master.ign
    LABEL installbootstrap
      MENU LABEL Install bootstrap
      KERNEL fcos/kernel
      APPEND initrd=fcos/initramfs.img,fcos/rootfs.img ip=dhcp coreos.inst=yes coreos.inst..platform.id=metal coreos.inst.insecure coreos.inst.install_dev=/dev/sda coreos.inst.ignition_url=http://$HUB_IP:8080/okd4/bootstrap.ign
MENU END
EOT
# Download
mkdir -p /var/lib/tftpboot/fcos \
  && curl -L $FCOS_BASE_URL-live-kernel-x86_64 > /var/lib/tftpboot/fcos/kernel \
  && curl -L $FCOS_BASE_URL-live-initramfs.x86_64.img > /var/lib/tftpboot/fcos/initramfs.img \
  && curl -L $FCOS_BASE_URL-live-rootfs.x86_64.img > /var/lib/tftpboot/fcos/rootfs.img  
# Add service user
useradd -r -s /sbin/nologin -d /var/lib/tftpboot tftp
# Configure FTP (+disable IPv6)
sed -i.bak -E 's|(server_args\s+=\s+).*|\1-u tftp -s /var/lib/tftpboot|' /etc/xinetd.d/tftp \
  && sed -i -E 's|(disable\s+=\s+).*|\1no|' /etc/xinetd.d/tftp \
  && sed -i -E 's|(flags\s+=\s+).*|\1IPv4|' /etc/xinetd.d/tftp
# Configure SELinux
chown -R tftp:tftp /var/lib/tftpboot \
  && semanage fcontext -a -t tftpdir_t "/var/lib/tftpboot(/.*)?" \
  && restorecon -R -v /var/lib/tftpboot
# Configure firewall
firewall-offline-cmd --add-service=tftp
# Enable service
systemctl enable xinetd.service

################################################################################
## Configure NTP server
################################################################################
# Configure firewall
firewall-offline-cmd --add-service=ntp
# Disable IPv6
sed -i.bak -E 's|(OPTIONS=).*|\1"-4 -g"|' /etc/sysconfig/ntpd
sed -i.bak -E 's|(.*::1.*)|#\1|' /etc/ntp.conf
# Enable service
systemctl enable ntpd.service

################################################################################
## Configure DNS server
################################################################################
# Create config
# /etc/named.conf
mv -v /etc/named.conf /etc/named.conf.bak && cat << EOT > /etc/named.conf
options {
  listen-on port 53       { 127.0.0.1; $HUB_IP; };
  directory               "/var/named";
  dump-file               "/var/named/data/cache_dump.db";
  statistics-file         "/var/named/data/named_stats.txt";
  memstatistics-file      "/var/named/data/named_mem_stats.txt";
  recursing-file          "/var/named/data/named.recursing";
  secroots-file           "/var/named/data/named.secroots";
  allow-query             { localhost; $NET_BASE.0/24; };
  recursion               yes;
  forwarders              { $FORWARD_DNS; };
  dnssec-enable           no;
  dnssec-validation       no;
  bindkeys-file           "/etc/named.root.key";
  managed-keys-directory  "/var/named/dynamic";
  pid-file "/run/named/named.pid";
  session-keyfile "/run/named/session.key";
};

logging {
  channel default_debug {
    file "data/named.run";
    severity dynamic;
  };
};

zone "." IN {
  type hint;
  file "named.ca";
};

include "/etc/named.rfc1912.zones";
include "/etc/named.root.key";
include "/etc/named/named.conf.local";
EOT
# /etc/named/named.conf.local
mkdir -p /etc/named/zones && cat <<EOT > /etc/named/named.conf.local
zone "$SEARCH_DOMAIN" {
    type master;
    file "/etc/named/zones/db.$SEARCH_DOMAIN"; # zone file path
};

zone "$INNET_BASE.in-addr.arpa" {
    type master;
    file "/etc/named/zones/db.$NET_BASE";  # $NET_BASE.0/24 subnet
};
EOT
# /etc/named/zones/db.$SEARCH_DOMAIN
cat << EOT > /etc/named/zones/db.$SEARCH_DOMAIN
\$TTL    604800
@       IN      SOA     $HUB_NAME.$SEARCH_DOMAIN. admin.$SEARCH_DOMAIN. (
                  1     ; Serial
             604800     ; Refresh
              86400     ; Retry
            2419200     ; Expire
             604800     ; Negative Cache TTL
)

; name servers - NS records
    IN      NS      $HUB_NAME

; name servers - A records
$HUB_NAME.$SEARCH_DOMAIN.          IN      A       $HUB_IP

; OpenShift Container Platform Cluster - A records
$BOOTSTRAP_NAME.$CLUSTER_NAME.$SEARCH_DOMAIN.     IN      A       $BOOTSTRAP_IP
EOT
echo $MASTERS | awk -v NB=$NET_BASE -v SD=$SEARCH_DOMAIN -v CN=$CLUSTER_NAME 'BEGIN{RS=";";FS=","} { print $2"."CN"."SD". IN A "NB"."$3 }' >> /etc/named/zones/db.$SEARCH_DOMAIN
echo $WORKERS | awk -v NB=$NET_BASE -v SD=$SEARCH_DOMAIN -v CN=$CLUSTER_NAME 'BEGIN{RS=";";FS=","} { print $2"."CN"."SD". IN A "NB"."$3 }' >> /etc/named/zones/db.$SEARCH_DOMAIN
cat << EOT >> /etc/named/zones/db.$SEARCH_DOMAIN

; OpenShift internal cluster IPs - A records
api.$CLUSTER_NAME.$SEARCH_DOMAIN.       IN    A    $HUB_IP
api-int.$CLUSTER_NAME.$SEARCH_DOMAIN.   IN    A    $HUB_IP
*.apps.$CLUSTER_NAME.$SEARCH_DOMAIN.    IN    A    $HUB_IP
EOT
echo $MASTERS | awk -v NB=$NET_BASE -v SD=$SEARCH_DOMAIN -v CN=$CLUSTER_NAME 'BEGIN{RS=";";FS=","} { print "etcd-"NR-1"."CN"."SD". IN A "NB"."$3 }' >> /etc/named/zones/db.$SEARCH_DOMAIN
cat << EOT >> /etc/named/zones/db.$SEARCH_DOMAIN
console-openshift-console.apps.$CLUSTER_NAME.$SEARCH_DOMAIN.     IN     A     $HUB_IP
oauth-openshift.apps.$CLUSTER_NAME.$SEARCH_DOMAIN.     IN     A     $HUB_IP

; OpenShift internal cluster IPs - SRV records
EOT
echo $MASTERS | awk -v SD=$SEARCH_DOMAIN -v CN=$CLUSTER_NAME 'BEGIN{RS=";";FS=","} { print "_etcd-server-ssl._tcp."CN"."SD" 86400 IN SRV 0 10 2380 etcd-"NR-1"."CN }' >> /etc/named/zones/db.$SEARCH_DOMAIN
# /etc/named/zones/db.$NET_BASE
cat << EOT > /etc/named/zones/db.$NET_BASE
\$TTL    604800
@       IN      SOA     $HUB_NAME.$SEARCH_DOMAIN. admin.$SEARCH_DOMAIN. (
                  6     ; Serial
             604800     ; Refresh
              86400     ; Retry
            2419200     ; Expire
             604800     ; Negative Cache TTL
)

; name servers - NS records
    IN      NS      $HUB_NAME.$SEARCH_DOMAIN.

; name servers - PTR records
$HUB_ID    IN    PTR    $HUB_NAME.$SEARCH_DOMAIN.

; OpenShift Container Platform Cluster - PTR records
$BOOTSTRAP_ID    IN    PTR    $BOOTSTRAP_NAME.$CLUSTER_NAME.$SEARCH_DOMAIN.
$HUB_ID    IN    PTR    api.$CLUSTER_NAME.$SEARCH_DOMAIN.
$HUB_ID    IN    PTR    api-int.$CLUSTER_NAME.$SEARCH_DOMAIN.
EOT
echo $MASTERS | awk -v SD=$SEARCH_DOMAIN -v CN=$CLUSTER_NAME 'BEGIN{RS=";";FS=","} { print $3" IN PTR "$2"."CN"."SD"." }' >> /etc/named/zones/db.$NET_BASE
echo $WORKERS | awk -v SD=$SEARCH_DOMAIN -v CN=$CLUSTER_NAME 'BEGIN{RS=";";FS=","} { print $3" IN PTR "$2"."CN"."SD"." }' >> /etc/named/zones/db.$NET_BASE
# Check config
named-checkconf
# Disable IPv6
echo 'OPTIONS="-4"' >> /etc/sysconfig/named
# Configure firewall
firewall-offline-cmd --add-port=53/udp
# Enable service
systemctl enable named.service

################################################################################
## Configure DHCP server
################################################################################
# Create config
# /etc/dhcp/dhcpd.conf
cat <<EOT >> /etc/dhcp/dhcpd.conf
authoritative;
ddns-update-style none;
default-lease-time 600;
max-lease-time 7200;
shared-network $ETH0 {
  subnet $NET_BASE.0 netmask 255.255.255.0 {
    option routers              $ETH0_ROUTER;
    option subnet-mask          255.255.255.0;
    option broadcast-address    $NET_BASE.255;
    option domain-name          "$SEARCH_DOMAIN";
    option domain-name-servers  $HUB_IP;
    option ntp-servers          $HUB_IP;
    next-server                 $HUB_IP;
    filename                    "/pxelinux.0";
    range   $NET_BASE.150 $NET_BASE.199;
  }
}
host $HUB_NAME { hardware ethernet $HUB_MAC; fixed-address $HUB_IP; option host-name "$HUB_NAME"; }
host $BOOTSTRAP_NAME { hardware ethernet $BOOTSTRAP_MAC; fixed-address $BOOTSTRAP_IP; option host-name "$BOOTSTRAP_NAME"; }
EOT
echo $MASTERS | awk -v NB=$NET_BASE 'BEGIN{RS=";";FS=","} { print "host "$2" { hardware ethernet "$1"; fixed-address "NB"."$3"; option host-name \""$2"\"; }" }' >> /etc/dhcp/dhcpd.conf
echo $WORKERS | awk -v NB=$NET_BASE 'BEGIN{RS=";";FS=","} { print "host "$2" { hardware ethernet "$1"; fixed-address "NB"."$3"; option host-name \""$2"\"; }" }' >> /etc/dhcp/dhcpd.conf
# Check config
dhcpd -t -cf /etc/dhcp/dhcpd.conf
# Configure firewall
firewall-offline-cmd --add-service=dhcp
# Enable service
systemctl enable dhcpd.service

################################################################################
## Configure reverse proxy
################################################################################
# Create config
mv -v /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.bak && cat <<EOT >> /etc/haproxy/haproxy.cfg
#
# Global settings
#---------------------------------------------------------------------
global
    maxconn     20000
    log         /dev/log local0 info
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the \'listen\' and \'backend\' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          300s
    timeout server          300s
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 20000

listen stats
    bind :9000
    mode http
    stats enable
    stats uri /

frontend okd4_k8s_api_fe
    bind :6443
    default_backend okd4_k8s_api_be
    mode tcp
    option tcplog

backend okd4_k8s_api_be
    balance source
    mode tcp
    server      $BOOTSTRAP_NAME $BOOTSTRAP_IP:6443 check
EOT
echo $MASTERS | awk -v NB=$NET_BASE 'BEGIN{RS=";";FS=","} { print "    server "$2" "NB"."$3":6443 check" }' >> /etc/haproxy/haproxy.cfg
cat <<EOT >> /etc/haproxy/haproxy.cfg

frontend okd4_machine_config_server_fe
    bind :22623
    default_backend okd4_machine_config_server_be
    mode tcp
    option tcplog

backend okd4_machine_config_server_be
    balance source
    mode tcp
    server      $BOOTSTRAP_NAME $BOOTSTRAP_IP:22623 check
EOT
echo $MASTERS | awk -v NB=$NET_BASE 'BEGIN{RS=";";FS=","} { print "    server "$2" "NB"."$3":22623 check" }' >> /etc/haproxy/haproxy.cfg
cat <<EOT >> /etc/haproxy/haproxy.cfg

frontend okd4_http_ingress_traffic_fe
    bind :80
    default_backend okd4_http_ingress_traffic_be
    mode tcp
    option tcplog

backend okd4_http_ingress_traffic_be
    balance source
    mode tcp
EOT
echo $WORKERS | awk -v NB=$NET_BASE 'BEGIN{RS=";";FS=","} { print "    server "$2" "NB"."$3":80 check" }' >> /etc/haproxy/haproxy.cfg
cat <<EOT >> /etc/haproxy/haproxy.cfg

frontend okd4_https_ingress_traffic_fe
    bind *:443
    default_backend okd4_https_ingress_traffic_be
    mode tcp
    option tcplog

backend okd4_https_ingress_traffic_be
    balance source
    mode tcp
EOT
echo $WORKERS | awk -v NB=$NET_BASE 'BEGIN{RS=";";FS=","} { print "    server "$2" "NB"."$3":443 check" }' >> /etc/haproxy/haproxy.cfg
# Configure SELinux
setsebool -P haproxy_connect_any 1
# Configure firewall
firewall-offline-cmd --add-port=6443/tcp
firewall-offline-cmd --add-port=22623/tcp
firewall-offline-cmd --add-service=http
firewall-offline-cmd --add-service=https
# Enable service
systemctl enable haproxy.service

################################################################################
## Configure web server
################################################################################
# Modify config
sed -i.bak 's/Listen 80/Listen 8080/' /etc/httpd/conf/httpd.conf
# Download OpenShift
curl -L $OKD_BASE_URL/openshift-client-linux-$OKD_VERSION.tar.gz > /tmp/ocl.tar.gz \
  && tar -zxvf /tmp/ocl.tar.gz -C /usr/local/bin/
curl -L $OKD_BASE_URL/openshift-install-linux-$OKD_VERSION.tar.gz > /tmp/oil.tar.gz \
  && tar -zxvf /tmp/oil.tar.gz -C /usr/local/bin/
# Create config
su - kubeadmin << EOF
ssh-keygen -t ed25519 -f /home/kubeadmin/.ssh/id_ed25519 -q -N "" \
  && sleep 1
EOF
export CORE_ED25519=$(cat /home/kubeadmin/.ssh/id_ed25519.pub | awk '{ print $2 }')
su - kubeadmin << EOF
mkdir /home/kubeadmin/okd4 && cat <<EOT > /home/kubeadmin/okd4/install-config.yaml
apiVersion: v1
baseDomain: $SEARCH_DOMAIN
metadata:
  name: $CLUSTER_NAME

compute:
- hyperthreading: Enabled
  name: worker
  replicas: 0

controlPlane:
  hyperthreading: Enabled
  name: $MASTER_NUM
  replicas: 2

networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14 
    hostPrefix: 23 
  networkType: OpenShiftSDN
  serviceNetwork: 
  - 172.30.0.0/16

platform:
  none: {}

fips: false

pullSecret: '{"auths":{"fake":{"auth": "bar"}}}' 
sshKey: 'ssh-ed25519 $CORE_ED25519' 
EOT
cp -v /home/kubeadmin/okd4/install-config.yaml /home/kubeadmin/okd4/install-config.yaml.bak
/usr/local/bin/openshift-install create manifests --dir=/home/kubeadmin/okd4
sed -i 's/mastersSchedulable: true/mastersSchedulable: false/' /home/kubeadmin/okd4/manifests/cluster-scheduler-02-config.yml
/usr/local/bin/openshift-install create ignition-configs --dir=/home/kubeadmin/okd4
EOF
# Make ignition configs
mkdir /var/www/html/okd4 && cat << EOT > /var/www/html/okd4/live.ign
{
  "ignition":{"version":"3.1.0"},
  "passwd":{
    "users":[
      {
        "name":"core",
        "passwordHash":"$6$dX/Qlu0hab1u.dHA$mC7Mq.WPoxrcHCFBMuI8ki8NLhA4W1VYIwM7ghB9B9PF6vQi4BPaTfG4aRYbDeIQkDJOzDRyzWJiAaANU47Kk0",
        "sshAuthorizedKeys":[
          "ssh-ed25519 $CORE_ED25519"
        ]
      }
    ]
  }
}
EOT
cp -v /home/kubeadmin/okd4/metadata.json /var/www/html/okd4/ \
  && cp -v /home/kubeadmin/okd4/*.ign /var/www/html/okd4/ \
  && chown -R apache: /var/www/html/ \
  && chmod -R 755 /var/www/html/
# Configure SELinux
setsebool -P httpd_read_user_content 1
# Configure firewall
firewall-offline-cmd --add-port=8080/tcp
# Enable service
systemctl enable httpd.service

################################################################################
## Configure NFS server
################################################################################
# Configure SELinux
setsebool -P nfs_export_all_rw 1
# Configure firewall
firewall-offline-cmd --zone=public --add-service mountd
firewall-offline-cmd --zone=public --add-service rpc-bind
firewall-offline-cmd --zone=public --add-service nfs
# Enable service
systemctl enable rpcbind.service nfs-server.service

%end
